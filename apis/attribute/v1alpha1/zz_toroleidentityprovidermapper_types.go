/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ToRoleIdentityProviderMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ToRoleIdentityProviderMapperParameters struct {

	// Attribute Friendly Name
	// +kubebuilder:validation:Optional
	AttributeFriendlyName *string `json:"attributeFriendlyName,omitempty" tf:"attribute_friendly_name,omitempty"`

	// Attribute Name
	// +kubebuilder:validation:Optional
	AttributeName *string `json:"attributeName,omitempty" tf:"attribute_name,omitempty"`

	// Attribute Value
	// +kubebuilder:validation:Optional
	AttributeValue *string `json:"attributeValue,omitempty" tf:"attribute_value,omitempty"`

	// OIDC Claim Name
	// +kubebuilder:validation:Optional
	ClaimName *string `json:"claimName,omitempty" tf:"claim_name,omitempty"`

	// OIDC Claim Value
	// +kubebuilder:validation:Optional
	ClaimValue *string `json:"claimValue,omitempty" tf:"claim_value,omitempty"`

	// +kubebuilder:validation:Optional
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// IDP Alias
	// +kubebuilder:validation:Required
	IdentityProviderAlias *string `json:"identityProviderAlias" tf:"identity_provider_alias,omitempty"`

	// Realm Name
	// +kubebuilder:validation:Required
	Realm *string `json:"realm" tf:"realm,omitempty"`

	// Role Name
	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// ToRoleIdentityProviderMapperSpec defines the desired state of ToRoleIdentityProviderMapper
type ToRoleIdentityProviderMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ToRoleIdentityProviderMapperParameters `json:"forProvider"`
}

// ToRoleIdentityProviderMapperStatus defines the observed state of ToRoleIdentityProviderMapper.
type ToRoleIdentityProviderMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ToRoleIdentityProviderMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ToRoleIdentityProviderMapper is the Schema for the ToRoleIdentityProviderMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ToRoleIdentityProviderMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ToRoleIdentityProviderMapperSpec   `json:"spec"`
	Status            ToRoleIdentityProviderMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ToRoleIdentityProviderMapperList contains a list of ToRoleIdentityProviderMappers
type ToRoleIdentityProviderMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ToRoleIdentityProviderMapper `json:"items"`
}

// Repository type metadata.
var (
	ToRoleIdentityProviderMapper_Kind             = "ToRoleIdentityProviderMapper"
	ToRoleIdentityProviderMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ToRoleIdentityProviderMapper_Kind}.String()
	ToRoleIdentityProviderMapper_KindAPIVersion   = ToRoleIdentityProviderMapper_Kind + "." + CRDGroupVersion.String()
	ToRoleIdentityProviderMapper_GroupVersionKind = CRDGroupVersion.WithKind(ToRoleIdentityProviderMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&ToRoleIdentityProviderMapper{}, &ToRoleIdentityProviderMapperList{})
}
