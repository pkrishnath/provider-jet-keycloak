/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExecutionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ExecutionParameters struct {

	// +kubebuilder:validation:Required
	Authenticator *string `json:"authenticator" tf:"authenticator,omitempty"`

	// +kubebuilder:validation:Required
	ParentFlowAlias *string `json:"parentFlowAlias" tf:"parent_flow_alias,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Optional
	Requirement *string `json:"requirement,omitempty" tf:"requirement,omitempty"`
}

// ExecutionSpec defines the desired state of Execution
type ExecutionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExecutionParameters `json:"forProvider"`
}

// ExecutionStatus defines the observed state of Execution.
type ExecutionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExecutionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Execution is the Schema for the Executions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type Execution struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExecutionSpec   `json:"spec"`
	Status            ExecutionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExecutionList contains a list of Executions
type ExecutionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Execution `json:"items"`
}

// Repository type metadata.
var (
	Execution_Kind             = "Execution"
	Execution_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Execution_Kind}.String()
	Execution_KindAPIVersion   = Execution_Kind + "." + CRDGroupVersion.String()
	Execution_GroupVersionKind = CRDGroupVersion.WithKind(Execution_Kind)
)

func init() {
	SchemeBuilder.Register(&Execution{}, &ExecutionList{})
}
