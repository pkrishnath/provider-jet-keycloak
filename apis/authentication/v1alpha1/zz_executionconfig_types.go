/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExecutionConfigObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ExecutionConfigParameters struct {

	// +kubebuilder:validation:Required
	Alias *string `json:"alias" tf:"alias,omitempty"`

	// +kubebuilder:validation:Required
	Config map[string]*string `json:"config" tf:"config,omitempty"`

	// +kubebuilder:validation:Required
	ExecutionID *string `json:"executionId" tf:"execution_id,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// ExecutionConfigSpec defines the desired state of ExecutionConfig
type ExecutionConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExecutionConfigParameters `json:"forProvider"`
}

// ExecutionConfigStatus defines the observed state of ExecutionConfig.
type ExecutionConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExecutionConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExecutionConfig is the Schema for the ExecutionConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ExecutionConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExecutionConfigSpec   `json:"spec"`
	Status            ExecutionConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExecutionConfigList contains a list of ExecutionConfigs
type ExecutionConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExecutionConfig `json:"items"`
}

// Repository type metadata.
var (
	ExecutionConfig_Kind             = "ExecutionConfig"
	ExecutionConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ExecutionConfig_Kind}.String()
	ExecutionConfig_KindAPIVersion   = ExecutionConfig_Kind + "." + CRDGroupVersion.String()
	ExecutionConfig_GroupVersionKind = CRDGroupVersion.WithKind(ExecutionConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&ExecutionConfig{}, &ExecutionConfigList{})
}
