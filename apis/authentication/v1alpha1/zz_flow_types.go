/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FlowObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FlowParameters struct {

	// +kubebuilder:validation:Required
	Alias *string `json:"alias" tf:"alias,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// FlowSpec defines the desired state of Flow
type FlowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlowParameters `json:"forProvider"`
}

// FlowStatus defines the observed state of Flow.
type FlowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Flow is the Schema for the Flows API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type Flow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FlowSpec   `json:"spec"`
	Status            FlowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlowList contains a list of Flows
type FlowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Flow `json:"items"`
}

// Repository type metadata.
var (
	Flow_Kind             = "Flow"
	Flow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Flow_Kind}.String()
	Flow_KindAPIVersion   = Flow_Kind + "." + CRDGroupVersion.String()
	Flow_GroupVersionKind = CRDGroupVersion.WithKind(Flow_Kind)
)

func init() {
	SchemeBuilder.Register(&Flow{}, &FlowList{})
}
