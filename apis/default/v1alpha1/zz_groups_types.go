/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupsParameters struct {

	// +kubebuilder:validation:Required
	GroupIds []*string `json:"groupIds" tf:"group_ids,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// GroupsSpec defines the desired state of Groups
type GroupsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupsParameters `json:"forProvider"`
}

// GroupsStatus defines the observed state of Groups.
type GroupsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Groups is the Schema for the Groupss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type Groups struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupsSpec   `json:"spec"`
	Status            GroupsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupsList contains a list of Groupss
type GroupsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Groups `json:"items"`
}

// Repository type metadata.
var (
	Groups_Kind             = "Groups"
	Groups_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Groups_Kind}.String()
	Groups_KindAPIVersion   = Groups_Kind + "." + CRDGroupVersion.String()
	Groups_GroupVersionKind = CRDGroupVersion.WithKind(Groups_Kind)
)

func init() {
	SchemeBuilder.Register(&Groups{}, &GroupsList{})
}
