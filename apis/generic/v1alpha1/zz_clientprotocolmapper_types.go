/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientProtocolMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientProtocolMapperParameters struct {

	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	// +kubebuilder:validation:Optional
	ClientScopeID *string `json:"clientScopeId,omitempty" tf:"client_scope_id,omitempty"`

	// +kubebuilder:validation:Required
	Config map[string]*string `json:"config" tf:"config,omitempty"`

	// The protocol of the client (openid-connect / saml).
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// The type of the protocol mapper.
	// +kubebuilder:validation:Required
	ProtocolMapper *string `json:"protocolMapper" tf:"protocol_mapper,omitempty"`

	// The realm id where the associated client or client scope exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// ClientProtocolMapperSpec defines the desired state of ClientProtocolMapper
type ClientProtocolMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientProtocolMapperParameters `json:"forProvider"`
}

// ClientProtocolMapperStatus defines the observed state of ClientProtocolMapper.
type ClientProtocolMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientProtocolMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientProtocolMapper is the Schema for the ClientProtocolMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientProtocolMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientProtocolMapperSpec   `json:"spec"`
	Status            ClientProtocolMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientProtocolMapperList contains a list of ClientProtocolMappers
type ClientProtocolMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientProtocolMapper `json:"items"`
}

// Repository type metadata.
var (
	ClientProtocolMapper_Kind             = "ClientProtocolMapper"
	ClientProtocolMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientProtocolMapper_Kind}.String()
	ClientProtocolMapper_KindAPIVersion   = ClientProtocolMapper_Kind + "." + CRDGroupVersion.String()
	ClientProtocolMapper_GroupVersionKind = CRDGroupVersion.WithKind(ClientProtocolMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientProtocolMapper{}, &ClientProtocolMapperList{})
}
