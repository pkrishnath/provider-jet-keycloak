/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientRoleMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientRoleMapperParameters struct {

	// The destination client of the client role. Cannot be used at the same time as client_scope_id.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// The destination client scope of the client role. Cannot be used at the same time as client_id.
	// +kubebuilder:validation:Optional
	ClientScopeID *string `json:"clientScopeId,omitempty" tf:"client_scope_id,omitempty"`

	// The realm id where the associated client or client scope exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// Id of the role to assign
	// +kubebuilder:validation:Required
	RoleID *string `json:"roleId" tf:"role_id,omitempty"`
}

// ClientRoleMapperSpec defines the desired state of ClientRoleMapper
type ClientRoleMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientRoleMapperParameters `json:"forProvider"`
}

// ClientRoleMapperStatus defines the observed state of ClientRoleMapper.
type ClientRoleMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientRoleMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientRoleMapper is the Schema for the ClientRoleMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientRoleMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientRoleMapperSpec   `json:"spec"`
	Status            ClientRoleMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientRoleMapperList contains a list of ClientRoleMappers
type ClientRoleMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientRoleMapper `json:"items"`
}

// Repository type metadata.
var (
	ClientRoleMapper_Kind             = "ClientRoleMapper"
	ClientRoleMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientRoleMapper_Kind}.String()
	ClientRoleMapper_KindAPIVersion   = ClientRoleMapper_Kind + "." + CRDGroupVersion.String()
	ClientRoleMapper_GroupVersionKind = CRDGroupVersion.WithKind(ClientRoleMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientRoleMapper{}, &ClientRoleMapperList{})
}
