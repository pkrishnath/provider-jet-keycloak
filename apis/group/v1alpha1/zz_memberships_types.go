/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MembershipsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MembershipsParameters struct {

	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// MembershipsSpec defines the desired state of Memberships
type MembershipsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MembershipsParameters `json:"forProvider"`
}

// MembershipsStatus defines the observed state of Memberships.
type MembershipsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MembershipsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Memberships is the Schema for the Membershipss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type Memberships struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MembershipsSpec   `json:"spec"`
	Status            MembershipsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MembershipsList contains a list of Membershipss
type MembershipsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Memberships `json:"items"`
}

// Repository type metadata.
var (
	Memberships_Kind             = "Memberships"
	Memberships_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Memberships_Kind}.String()
	Memberships_KindAPIVersion   = Memberships_Kind + "." + CRDGroupVersion.String()
	Memberships_GroupVersionKind = CRDGroupVersion.WithKind(Memberships_Kind)
)

func init() {
	SchemeBuilder.Register(&Memberships{}, &MembershipsList{})
}
