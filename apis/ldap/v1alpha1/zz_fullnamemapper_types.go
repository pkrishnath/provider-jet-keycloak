/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FullNameMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FullNameMapperParameters struct {

	// +kubebuilder:validation:Required
	LdapFullNameAttribute *string `json:"ldapFullNameAttribute" tf:"ldap_full_name_attribute,omitempty"`

	// The ldap user federation provider to attach this mapper to.
	// +kubebuilder:validation:Required
	LdapUserFederationID *string `json:"ldapUserFederationId" tf:"ldap_user_federation_id,omitempty"`

	// +kubebuilder:validation:Optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// The realm in which the ldap user federation provider exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Optional
	WriteOnly *bool `json:"writeOnly,omitempty" tf:"write_only,omitempty"`
}

// FullNameMapperSpec defines the desired state of FullNameMapper
type FullNameMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FullNameMapperParameters `json:"forProvider"`
}

// FullNameMapperStatus defines the observed state of FullNameMapper.
type FullNameMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FullNameMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FullNameMapper is the Schema for the FullNameMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type FullNameMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FullNameMapperSpec   `json:"spec"`
	Status            FullNameMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FullNameMapperList contains a list of FullNameMappers
type FullNameMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FullNameMapper `json:"items"`
}

// Repository type metadata.
var (
	FullNameMapper_Kind             = "FullNameMapper"
	FullNameMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FullNameMapper_Kind}.String()
	FullNameMapper_KindAPIVersion   = FullNameMapper_Kind + "." + CRDGroupVersion.String()
	FullNameMapper_GroupVersionKind = CRDGroupVersion.WithKind(FullNameMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&FullNameMapper{}, &FullNameMapperList{})
}
