/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupMapperParameters struct {

	// +kubebuilder:validation:Optional
	DropNonExistingGroupsDuringSync *bool `json:"dropNonExistingGroupsDuringSync,omitempty" tf:"drop_non_existing_groups_during_sync,omitempty"`

	// +kubebuilder:validation:Required
	GroupNameLdapAttribute *string `json:"groupNameLdapAttribute" tf:"group_name_ldap_attribute,omitempty"`

	// +kubebuilder:validation:Required
	GroupObjectClasses []*string `json:"groupObjectClasses" tf:"group_object_classes,omitempty"`

	// +kubebuilder:validation:Optional
	GroupsLdapFilter *string `json:"groupsLdapFilter,omitempty" tf:"groups_ldap_filter,omitempty"`

	// +kubebuilder:validation:Optional
	GroupsPath *string `json:"groupsPath,omitempty" tf:"groups_path,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreMissingGroups *bool `json:"ignoreMissingGroups,omitempty" tf:"ignore_missing_groups,omitempty"`

	// +kubebuilder:validation:Required
	LdapGroupsDn *string `json:"ldapGroupsDn" tf:"ldap_groups_dn,omitempty"`

	// The ldap user federation provider to attach this mapper to.
	// +kubebuilder:validation:Required
	LdapUserFederationID *string `json:"ldapUserFederationId" tf:"ldap_user_federation_id,omitempty"`

	// +kubebuilder:validation:Optional
	MappedGroupAttributes []*string `json:"mappedGroupAttributes,omitempty" tf:"mapped_group_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	MemberofLdapAttribute *string `json:"memberofLdapAttribute,omitempty" tf:"memberof_ldap_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	MembershipAttributeType *string `json:"membershipAttributeType,omitempty" tf:"membership_attribute_type,omitempty"`

	// +kubebuilder:validation:Required
	MembershipLdapAttribute *string `json:"membershipLdapAttribute" tf:"membership_ldap_attribute,omitempty"`

	// +kubebuilder:validation:Required
	MembershipUserLdapAttribute *string `json:"membershipUserLdapAttribute" tf:"membership_user_ldap_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	PreserveGroupInheritance *bool `json:"preserveGroupInheritance,omitempty" tf:"preserve_group_inheritance,omitempty"`

	// The realm in which the ldap user federation provider exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Optional
	UserRolesRetrieveStrategy *string `json:"userRolesRetrieveStrategy,omitempty" tf:"user_roles_retrieve_strategy,omitempty"`
}

// GroupMapperSpec defines the desired state of GroupMapper
type GroupMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupMapperParameters `json:"forProvider"`
}

// GroupMapperStatus defines the observed state of GroupMapper.
type GroupMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMapper is the Schema for the GroupMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type GroupMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupMapperSpec   `json:"spec"`
	Status            GroupMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMapperList contains a list of GroupMappers
type GroupMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupMapper `json:"items"`
}

// Repository type metadata.
var (
	GroupMapper_Kind             = "GroupMapper"
	GroupMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupMapper_Kind}.String()
	GroupMapper_KindAPIVersion   = GroupMapper_Kind + "." + CRDGroupVersion.String()
	GroupMapper_GroupVersionKind = CRDGroupVersion.WithKind(GroupMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupMapper{}, &GroupMapperList{})
}
