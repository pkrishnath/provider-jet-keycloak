/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HardcodedRoleMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HardcodedRoleMapperParameters struct {

	// The ldap user federation provider to attach this mapper to.
	// +kubebuilder:validation:Required
	LdapUserFederationID *string `json:"ldapUserFederationId" tf:"ldap_user_federation_id,omitempty"`

	// The realm in which the ldap user federation provider exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// Role to grant to user.
	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// HardcodedRoleMapperSpec defines the desired state of HardcodedRoleMapper
type HardcodedRoleMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HardcodedRoleMapperParameters `json:"forProvider"`
}

// HardcodedRoleMapperStatus defines the observed state of HardcodedRoleMapper.
type HardcodedRoleMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HardcodedRoleMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HardcodedRoleMapper is the Schema for the HardcodedRoleMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type HardcodedRoleMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HardcodedRoleMapperSpec   `json:"spec"`
	Status            HardcodedRoleMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HardcodedRoleMapperList contains a list of HardcodedRoleMappers
type HardcodedRoleMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HardcodedRoleMapper `json:"items"`
}

// Repository type metadata.
var (
	HardcodedRoleMapper_Kind             = "HardcodedRoleMapper"
	HardcodedRoleMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HardcodedRoleMapper_Kind}.String()
	HardcodedRoleMapper_KindAPIVersion   = HardcodedRoleMapper_Kind + "." + CRDGroupVersion.String()
	HardcodedRoleMapper_GroupVersionKind = CRDGroupVersion.WithKind(HardcodedRoleMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&HardcodedRoleMapper{}, &HardcodedRoleMapperList{})
}
