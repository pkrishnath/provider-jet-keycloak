/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MsadLdsUserAccountControlMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MsadLdsUserAccountControlMapperParameters struct {

	// The ldap user federation provider to attach this mapper to.
	// +kubebuilder:validation:Required
	LdapUserFederationID *string `json:"ldapUserFederationId" tf:"ldap_user_federation_id,omitempty"`

	// The realm in which the ldap user federation provider exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// MsadLdsUserAccountControlMapperSpec defines the desired state of MsadLdsUserAccountControlMapper
type MsadLdsUserAccountControlMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MsadLdsUserAccountControlMapperParameters `json:"forProvider"`
}

// MsadLdsUserAccountControlMapperStatus defines the observed state of MsadLdsUserAccountControlMapper.
type MsadLdsUserAccountControlMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MsadLdsUserAccountControlMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MsadLdsUserAccountControlMapper is the Schema for the MsadLdsUserAccountControlMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type MsadLdsUserAccountControlMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MsadLdsUserAccountControlMapperSpec   `json:"spec"`
	Status            MsadLdsUserAccountControlMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MsadLdsUserAccountControlMapperList contains a list of MsadLdsUserAccountControlMappers
type MsadLdsUserAccountControlMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MsadLdsUserAccountControlMapper `json:"items"`
}

// Repository type metadata.
var (
	MsadLdsUserAccountControlMapper_Kind             = "MsadLdsUserAccountControlMapper"
	MsadLdsUserAccountControlMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MsadLdsUserAccountControlMapper_Kind}.String()
	MsadLdsUserAccountControlMapper_KindAPIVersion   = MsadLdsUserAccountControlMapper_Kind + "." + CRDGroupVersion.String()
	MsadLdsUserAccountControlMapper_GroupVersionKind = CRDGroupVersion.WithKind(MsadLdsUserAccountControlMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&MsadLdsUserAccountControlMapper{}, &MsadLdsUserAccountControlMapperList{})
}
