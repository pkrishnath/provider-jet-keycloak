/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MsadUserAccountControlMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MsadUserAccountControlMapperParameters struct {

	// +kubebuilder:validation:Optional
	LdapPasswordPolicyHintsEnabled *bool `json:"ldapPasswordPolicyHintsEnabled,omitempty" tf:"ldap_password_policy_hints_enabled,omitempty"`

	// The ldap user federation provider to attach this mapper to.
	// +kubebuilder:validation:Required
	LdapUserFederationID *string `json:"ldapUserFederationId" tf:"ldap_user_federation_id,omitempty"`

	// The realm in which the ldap user federation provider exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// MsadUserAccountControlMapperSpec defines the desired state of MsadUserAccountControlMapper
type MsadUserAccountControlMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MsadUserAccountControlMapperParameters `json:"forProvider"`
}

// MsadUserAccountControlMapperStatus defines the observed state of MsadUserAccountControlMapper.
type MsadUserAccountControlMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MsadUserAccountControlMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MsadUserAccountControlMapper is the Schema for the MsadUserAccountControlMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type MsadUserAccountControlMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MsadUserAccountControlMapperSpec   `json:"spec"`
	Status            MsadUserAccountControlMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MsadUserAccountControlMapperList contains a list of MsadUserAccountControlMappers
type MsadUserAccountControlMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MsadUserAccountControlMapper `json:"items"`
}

// Repository type metadata.
var (
	MsadUserAccountControlMapper_Kind             = "MsadUserAccountControlMapper"
	MsadUserAccountControlMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MsadUserAccountControlMapper_Kind}.String()
	MsadUserAccountControlMapper_KindAPIVersion   = MsadUserAccountControlMapper_Kind + "." + CRDGroupVersion.String()
	MsadUserAccountControlMapper_GroupVersionKind = CRDGroupVersion.WithKind(MsadUserAccountControlMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&MsadUserAccountControlMapper{}, &MsadUserAccountControlMapperList{})
}
