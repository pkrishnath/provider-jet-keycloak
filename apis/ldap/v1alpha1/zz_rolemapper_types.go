/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RoleMapperParameters struct {

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	LdapRolesDn *string `json:"ldapRolesDn" tf:"ldap_roles_dn,omitempty"`

	// The ldap user federation provider to attach this mapper to.
	// +kubebuilder:validation:Required
	LdapUserFederationID *string `json:"ldapUserFederationId" tf:"ldap_user_federation_id,omitempty"`

	// +kubebuilder:validation:Optional
	MemberofLdapAttribute *string `json:"memberofLdapAttribute,omitempty" tf:"memberof_ldap_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	MembershipAttributeType *string `json:"membershipAttributeType,omitempty" tf:"membership_attribute_type,omitempty"`

	// +kubebuilder:validation:Required
	MembershipLdapAttribute *string `json:"membershipLdapAttribute" tf:"membership_ldap_attribute,omitempty"`

	// +kubebuilder:validation:Required
	MembershipUserLdapAttribute *string `json:"membershipUserLdapAttribute" tf:"membership_user_ldap_attribute,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The realm in which the ldap user federation provider exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	RoleNameLdapAttribute *string `json:"roleNameLdapAttribute" tf:"role_name_ldap_attribute,omitempty"`

	// +kubebuilder:validation:Required
	RoleObjectClasses []*string `json:"roleObjectClasses" tf:"role_object_classes,omitempty"`

	// +kubebuilder:validation:Optional
	RolesLdapFilter *string `json:"rolesLdapFilter,omitempty" tf:"roles_ldap_filter,omitempty"`

	// +kubebuilder:validation:Optional
	UseRealmRolesMapping *bool `json:"useRealmRolesMapping,omitempty" tf:"use_realm_roles_mapping,omitempty"`

	// +kubebuilder:validation:Optional
	UserRolesRetrieveStrategy *string `json:"userRolesRetrieveStrategy,omitempty" tf:"user_roles_retrieve_strategy,omitempty"`
}

// RoleMapperSpec defines the desired state of RoleMapper
type RoleMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleMapperParameters `json:"forProvider"`
}

// RoleMapperStatus defines the observed state of RoleMapper.
type RoleMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RoleMapper is the Schema for the RoleMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type RoleMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleMapperSpec   `json:"spec"`
	Status            RoleMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleMapperList contains a list of RoleMappers
type RoleMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleMapper `json:"items"`
}

// Repository type metadata.
var (
	RoleMapper_Kind             = "RoleMapper"
	RoleMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleMapper_Kind}.String()
	RoleMapper_KindAPIVersion   = RoleMapper_Kind + "." + CRDGroupVersion.String()
	RoleMapper_GroupVersionKind = CRDGroupVersion.WithKind(RoleMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleMapper{}, &RoleMapperList{})
}
