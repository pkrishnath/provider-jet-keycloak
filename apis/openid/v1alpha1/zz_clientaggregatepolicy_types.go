/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientAggregatePolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientAggregatePolicyParameters struct {

	// +kubebuilder:validation:Required
	DecisionStrategy *string `json:"decisionStrategy" tf:"decision_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Logic *string `json:"logic,omitempty" tf:"logic,omitempty"`

	// +kubebuilder:validation:Required
	Policies []*string `json:"policies" tf:"policies,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceServerID *string `json:"resourceServerId" tf:"resource_server_id,omitempty"`
}

// ClientAggregatePolicySpec defines the desired state of ClientAggregatePolicy
type ClientAggregatePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientAggregatePolicyParameters `json:"forProvider"`
}

// ClientAggregatePolicyStatus defines the observed state of ClientAggregatePolicy.
type ClientAggregatePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientAggregatePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientAggregatePolicy is the Schema for the ClientAggregatePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientAggregatePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientAggregatePolicySpec   `json:"spec"`
	Status            ClientAggregatePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientAggregatePolicyList contains a list of ClientAggregatePolicys
type ClientAggregatePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientAggregatePolicy `json:"items"`
}

// Repository type metadata.
var (
	ClientAggregatePolicy_Kind             = "ClientAggregatePolicy"
	ClientAggregatePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientAggregatePolicy_Kind}.String()
	ClientAggregatePolicy_KindAPIVersion   = ClientAggregatePolicy_Kind + "." + CRDGroupVersion.String()
	ClientAggregatePolicy_GroupVersionKind = CRDGroupVersion.WithKind(ClientAggregatePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientAggregatePolicy{}, &ClientAggregatePolicyList{})
}
