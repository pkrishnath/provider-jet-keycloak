/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientAuthorizationScopeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientAuthorizationScopeParameters struct {

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	IconURI *string `json:"iconUri,omitempty" tf:"icon_uri,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceServerID *string `json:"resourceServerId" tf:"resource_server_id,omitempty"`
}

// ClientAuthorizationScopeSpec defines the desired state of ClientAuthorizationScope
type ClientAuthorizationScopeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientAuthorizationScopeParameters `json:"forProvider"`
}

// ClientAuthorizationScopeStatus defines the observed state of ClientAuthorizationScope.
type ClientAuthorizationScopeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientAuthorizationScopeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientAuthorizationScope is the Schema for the ClientAuthorizationScopes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientAuthorizationScope struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientAuthorizationScopeSpec   `json:"spec"`
	Status            ClientAuthorizationScopeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientAuthorizationScopeList contains a list of ClientAuthorizationScopes
type ClientAuthorizationScopeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientAuthorizationScope `json:"items"`
}

// Repository type metadata.
var (
	ClientAuthorizationScope_Kind             = "ClientAuthorizationScope"
	ClientAuthorizationScope_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientAuthorizationScope_Kind}.String()
	ClientAuthorizationScope_KindAPIVersion   = ClientAuthorizationScope_Kind + "." + CRDGroupVersion.String()
	ClientAuthorizationScope_GroupVersionKind = CRDGroupVersion.WithKind(ClientAuthorizationScope_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientAuthorizationScope{}, &ClientAuthorizationScopeList{})
}
