/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientJsPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientJsPolicyParameters struct {

	// +kubebuilder:validation:Required
	Code *string `json:"code" tf:"code,omitempty"`

	// +kubebuilder:validation:Required
	DecisionStrategy *string `json:"decisionStrategy" tf:"decision_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Logic *string `json:"logic,omitempty" tf:"logic,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceServerID *string `json:"resourceServerId" tf:"resource_server_id,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ClientJsPolicySpec defines the desired state of ClientJsPolicy
type ClientJsPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientJsPolicyParameters `json:"forProvider"`
}

// ClientJsPolicyStatus defines the observed state of ClientJsPolicy.
type ClientJsPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientJsPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientJsPolicy is the Schema for the ClientJsPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientJsPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientJsPolicySpec   `json:"spec"`
	Status            ClientJsPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientJsPolicyList contains a list of ClientJsPolicys
type ClientJsPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientJsPolicy `json:"items"`
}

// Repository type metadata.
var (
	ClientJsPolicy_Kind             = "ClientJsPolicy"
	ClientJsPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientJsPolicy_Kind}.String()
	ClientJsPolicy_KindAPIVersion   = ClientJsPolicy_Kind + "." + CRDGroupVersion.String()
	ClientJsPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ClientJsPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientJsPolicy{}, &ClientJsPolicyList{})
}
