/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientOptionalScopesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientOptionalScopesParameters struct {

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	OptionalScopes []*string `json:"optionalScopes" tf:"optional_scopes,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// ClientOptionalScopesSpec defines the desired state of ClientOptionalScopes
type ClientOptionalScopesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientOptionalScopesParameters `json:"forProvider"`
}

// ClientOptionalScopesStatus defines the observed state of ClientOptionalScopes.
type ClientOptionalScopesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientOptionalScopesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientOptionalScopes is the Schema for the ClientOptionalScopess API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientOptionalScopes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientOptionalScopesSpec   `json:"spec"`
	Status            ClientOptionalScopesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientOptionalScopesList contains a list of ClientOptionalScopess
type ClientOptionalScopesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientOptionalScopes `json:"items"`
}

// Repository type metadata.
var (
	ClientOptionalScopes_Kind             = "ClientOptionalScopes"
	ClientOptionalScopes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientOptionalScopes_Kind}.String()
	ClientOptionalScopes_KindAPIVersion   = ClientOptionalScopes_Kind + "." + CRDGroupVersion.String()
	ClientOptionalScopes_GroupVersionKind = CRDGroupVersion.WithKind(ClientOptionalScopes_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientOptionalScopes{}, &ClientOptionalScopesList{})
}
