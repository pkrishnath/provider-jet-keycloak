/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientRolePolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientRolePolicyParameters struct {

	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Logic *string `json:"logic,omitempty" tf:"logic,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceServerID *string `json:"resourceServerId" tf:"resource_server_id,omitempty"`

	// +kubebuilder:validation:Required
	Role []RoleParameters `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type RoleObservation struct {
}

type RoleParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Required *bool `json:"required" tf:"required,omitempty"`
}

// ClientRolePolicySpec defines the desired state of ClientRolePolicy
type ClientRolePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientRolePolicyParameters `json:"forProvider"`
}

// ClientRolePolicyStatus defines the observed state of ClientRolePolicy.
type ClientRolePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientRolePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientRolePolicy is the Schema for the ClientRolePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientRolePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientRolePolicySpec   `json:"spec"`
	Status            ClientRolePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientRolePolicyList contains a list of ClientRolePolicys
type ClientRolePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientRolePolicy `json:"items"`
}

// Repository type metadata.
var (
	ClientRolePolicy_Kind             = "ClientRolePolicy"
	ClientRolePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientRolePolicy_Kind}.String()
	ClientRolePolicy_KindAPIVersion   = ClientRolePolicy_Kind + "." + CRDGroupVersion.String()
	ClientRolePolicy_GroupVersionKind = CRDGroupVersion.WithKind(ClientRolePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientRolePolicy{}, &ClientRolePolicyList{})
}
