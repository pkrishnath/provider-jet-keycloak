/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientScopeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientScopeParameters struct {

	// +kubebuilder:validation:Optional
	ConsentScreenText *string `json:"consentScreenText,omitempty" tf:"consent_screen_text,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	GuiOrder *float64 `json:"guiOrder,omitempty" tf:"gui_order,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeInTokenScope *bool `json:"includeInTokenScope,omitempty" tf:"include_in_token_scope,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// ClientScopeSpec defines the desired state of ClientScope
type ClientScopeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientScopeParameters `json:"forProvider"`
}

// ClientScopeStatus defines the observed state of ClientScope.
type ClientScopeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientScopeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientScope is the Schema for the ClientScopes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientScope struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientScopeSpec   `json:"spec"`
	Status            ClientScopeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientScopeList contains a list of ClientScopes
type ClientScopeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientScope `json:"items"`
}

// Repository type metadata.
var (
	ClientScope_Kind             = "ClientScope"
	ClientScope_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientScope_Kind}.String()
	ClientScope_KindAPIVersion   = ClientScope_Kind + "." + CRDGroupVersion.String()
	ClientScope_GroupVersionKind = CRDGroupVersion.WithKind(ClientScope_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientScope{}, &ClientScopeList{})
}
