/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientServiceAccountRoleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientServiceAccountRoleParameters struct {

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	ServiceAccountUserID *string `json:"serviceAccountUserId" tf:"service_account_user_id,omitempty"`
}

// ClientServiceAccountRoleSpec defines the desired state of ClientServiceAccountRole
type ClientServiceAccountRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientServiceAccountRoleParameters `json:"forProvider"`
}

// ClientServiceAccountRoleStatus defines the observed state of ClientServiceAccountRole.
type ClientServiceAccountRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientServiceAccountRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientServiceAccountRole is the Schema for the ClientServiceAccountRoles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientServiceAccountRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientServiceAccountRoleSpec   `json:"spec"`
	Status            ClientServiceAccountRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientServiceAccountRoleList contains a list of ClientServiceAccountRoles
type ClientServiceAccountRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientServiceAccountRole `json:"items"`
}

// Repository type metadata.
var (
	ClientServiceAccountRole_Kind             = "ClientServiceAccountRole"
	ClientServiceAccountRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientServiceAccountRole_Kind}.String()
	ClientServiceAccountRole_KindAPIVersion   = ClientServiceAccountRole_Kind + "." + CRDGroupVersion.String()
	ClientServiceAccountRole_GroupVersionKind = CRDGroupVersion.WithKind(ClientServiceAccountRole_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientServiceAccountRole{}, &ClientServiceAccountRoleList{})
}
