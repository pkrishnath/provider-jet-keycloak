/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientTimePolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientTimePolicyParameters struct {

	// +kubebuilder:validation:Optional
	DayMonth *string `json:"dayMonth,omitempty" tf:"day_month,omitempty"`

	// +kubebuilder:validation:Optional
	DayMonthEnd *string `json:"dayMonthEnd,omitempty" tf:"day_month_end,omitempty"`

	// +kubebuilder:validation:Required
	DecisionStrategy *string `json:"decisionStrategy" tf:"decision_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Hour *string `json:"hour,omitempty" tf:"hour,omitempty"`

	// +kubebuilder:validation:Optional
	HourEnd *string `json:"hourEnd,omitempty" tf:"hour_end,omitempty"`

	// +kubebuilder:validation:Optional
	Logic *string `json:"logic,omitempty" tf:"logic,omitempty"`

	// +kubebuilder:validation:Optional
	Minute *string `json:"minute,omitempty" tf:"minute,omitempty"`

	// +kubebuilder:validation:Optional
	MinuteEnd *string `json:"minuteEnd,omitempty" tf:"minute_end,omitempty"`

	// +kubebuilder:validation:Optional
	Month *string `json:"month,omitempty" tf:"month,omitempty"`

	// +kubebuilder:validation:Optional
	MonthEnd *string `json:"monthEnd,omitempty" tf:"month_end,omitempty"`

	// +kubebuilder:validation:Optional
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	// +kubebuilder:validation:Optional
	NotOnOrAfter *string `json:"notOnOrAfter,omitempty" tf:"not_on_or_after,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceServerID *string `json:"resourceServerId" tf:"resource_server_id,omitempty"`

	// +kubebuilder:validation:Optional
	Year *string `json:"year,omitempty" tf:"year,omitempty"`

	// +kubebuilder:validation:Optional
	YearEnd *string `json:"yearEnd,omitempty" tf:"year_end,omitempty"`
}

// ClientTimePolicySpec defines the desired state of ClientTimePolicy
type ClientTimePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientTimePolicyParameters `json:"forProvider"`
}

// ClientTimePolicyStatus defines the observed state of ClientTimePolicy.
type ClientTimePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientTimePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientTimePolicy is the Schema for the ClientTimePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientTimePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientTimePolicySpec   `json:"spec"`
	Status            ClientTimePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientTimePolicyList contains a list of ClientTimePolicys
type ClientTimePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientTimePolicy `json:"items"`
}

// Repository type metadata.
var (
	ClientTimePolicy_Kind             = "ClientTimePolicy"
	ClientTimePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientTimePolicy_Kind}.String()
	ClientTimePolicy_KindAPIVersion   = ClientTimePolicy_Kind + "." + CRDGroupVersion.String()
	ClientTimePolicy_GroupVersionKind = CRDGroupVersion.WithKind(ClientTimePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientTimePolicy{}, &ClientTimePolicyList{})
}
