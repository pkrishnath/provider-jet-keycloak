/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientUserPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClientUserPolicyParameters struct {

	// +kubebuilder:validation:Required
	DecisionStrategy *string `json:"decisionStrategy" tf:"decision_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Logic *string `json:"logic,omitempty" tf:"logic,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceServerID *string `json:"resourceServerId" tf:"resource_server_id,omitempty"`

	// +kubebuilder:validation:Required
	Users []*string `json:"users" tf:"users,omitempty"`
}

// ClientUserPolicySpec defines the desired state of ClientUserPolicy
type ClientUserPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientUserPolicyParameters `json:"forProvider"`
}

// ClientUserPolicyStatus defines the observed state of ClientUserPolicy.
type ClientUserPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientUserPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClientUserPolicy is the Schema for the ClientUserPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type ClientUserPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientUserPolicySpec   `json:"spec"`
	Status            ClientUserPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientUserPolicyList contains a list of ClientUserPolicys
type ClientUserPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientUserPolicy `json:"items"`
}

// Repository type metadata.
var (
	ClientUserPolicy_Kind             = "ClientUserPolicy"
	ClientUserPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientUserPolicy_Kind}.String()
	ClientUserPolicy_KindAPIVersion   = ClientUserPolicy_Kind + "." + CRDGroupVersion.String()
	ClientUserPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ClientUserPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientUserPolicy{}, &ClientUserPolicyList{})
}
