/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FullNameProtocolMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FullNameProtocolMapperParameters struct {

	// +kubebuilder:validation:Optional
	AddToAccessToken *bool `json:"addToAccessToken,omitempty" tf:"add_to_access_token,omitempty"`

	// +kubebuilder:validation:Optional
	AddToIDToken *bool `json:"addToIdToken,omitempty" tf:"add_to_id_token,omitempty"`

	// +kubebuilder:validation:Optional
	AddToUserinfo *bool `json:"addToUserinfo,omitempty" tf:"add_to_userinfo,omitempty"`

	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	// +kubebuilder:validation:Optional
	ClientScopeID *string `json:"clientScopeId,omitempty" tf:"client_scope_id,omitempty"`

	// The realm id where the associated client or client scope exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// FullNameProtocolMapperSpec defines the desired state of FullNameProtocolMapper
type FullNameProtocolMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FullNameProtocolMapperParameters `json:"forProvider"`
}

// FullNameProtocolMapperStatus defines the observed state of FullNameProtocolMapper.
type FullNameProtocolMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FullNameProtocolMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FullNameProtocolMapper is the Schema for the FullNameProtocolMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type FullNameProtocolMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FullNameProtocolMapperSpec   `json:"spec"`
	Status            FullNameProtocolMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FullNameProtocolMapperList contains a list of FullNameProtocolMappers
type FullNameProtocolMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FullNameProtocolMapper `json:"items"`
}

// Repository type metadata.
var (
	FullNameProtocolMapper_Kind             = "FullNameProtocolMapper"
	FullNameProtocolMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FullNameProtocolMapper_Kind}.String()
	FullNameProtocolMapper_KindAPIVersion   = FullNameProtocolMapper_Kind + "." + CRDGroupVersion.String()
	FullNameProtocolMapper_GroupVersionKind = CRDGroupVersion.WithKind(FullNameProtocolMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&FullNameProtocolMapper{}, &FullNameProtocolMapperList{})
}
