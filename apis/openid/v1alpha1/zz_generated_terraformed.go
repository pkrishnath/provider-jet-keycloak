/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this AudienceProtocolMapper
func (mg *AudienceProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_audience_protocol_mapper"
}

// GetConnectionDetailsMapping for this AudienceProtocolMapper
func (tr *AudienceProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AudienceProtocolMapper
func (tr *AudienceProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AudienceProtocolMapper
func (tr *AudienceProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AudienceProtocolMapper
func (tr *AudienceProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AudienceProtocolMapper
func (tr *AudienceProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AudienceProtocolMapper
func (tr *AudienceProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AudienceProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AudienceProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &AudienceProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AudienceProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AudienceResolveProtocolMapper
func (mg *AudienceResolveProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_audience_resolve_protocol_mapper"
}

// GetConnectionDetailsMapping for this AudienceResolveProtocolMapper
func (tr *AudienceResolveProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AudienceResolveProtocolMapper
func (tr *AudienceResolveProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AudienceResolveProtocolMapper
func (tr *AudienceResolveProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AudienceResolveProtocolMapper
func (tr *AudienceResolveProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AudienceResolveProtocolMapper
func (tr *AudienceResolveProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AudienceResolveProtocolMapper
func (tr *AudienceResolveProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AudienceResolveProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AudienceResolveProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &AudienceResolveProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AudienceResolveProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Client
func (mg *Client) GetTerraformResourceType() string {
	return "keycloak_openid_client"
}

// GetConnectionDetailsMapping for this Client
func (tr *Client) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"client_secret": "spec.forProvider.clientSecretSecretRef"}
}

// GetObservation of this Client
func (tr *Client) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Client
func (tr *Client) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Client
func (tr *Client) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Client
func (tr *Client) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Client
func (tr *Client) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Client using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Client) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Client) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientAggregatePolicy
func (mg *ClientAggregatePolicy) GetTerraformResourceType() string {
	return "keycloak_openid_client_aggregate_policy"
}

// GetConnectionDetailsMapping for this ClientAggregatePolicy
func (tr *ClientAggregatePolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientAggregatePolicy
func (tr *ClientAggregatePolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientAggregatePolicy
func (tr *ClientAggregatePolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientAggregatePolicy
func (tr *ClientAggregatePolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientAggregatePolicy
func (tr *ClientAggregatePolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientAggregatePolicy
func (tr *ClientAggregatePolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientAggregatePolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientAggregatePolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientAggregatePolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientAggregatePolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientAuthorizationPermission
func (mg *ClientAuthorizationPermission) GetTerraformResourceType() string {
	return "keycloak_openid_client_authorization_permission"
}

// GetConnectionDetailsMapping for this ClientAuthorizationPermission
func (tr *ClientAuthorizationPermission) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientAuthorizationPermission
func (tr *ClientAuthorizationPermission) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientAuthorizationPermission
func (tr *ClientAuthorizationPermission) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientAuthorizationPermission
func (tr *ClientAuthorizationPermission) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientAuthorizationPermission
func (tr *ClientAuthorizationPermission) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientAuthorizationPermission
func (tr *ClientAuthorizationPermission) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientAuthorizationPermission using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientAuthorizationPermission) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientAuthorizationPermissionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientAuthorizationPermission) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientAuthorizationResource
func (mg *ClientAuthorizationResource) GetTerraformResourceType() string {
	return "keycloak_openid_client_authorization_resource"
}

// GetConnectionDetailsMapping for this ClientAuthorizationResource
func (tr *ClientAuthorizationResource) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientAuthorizationResource
func (tr *ClientAuthorizationResource) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientAuthorizationResource
func (tr *ClientAuthorizationResource) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientAuthorizationResource
func (tr *ClientAuthorizationResource) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientAuthorizationResource
func (tr *ClientAuthorizationResource) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientAuthorizationResource
func (tr *ClientAuthorizationResource) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientAuthorizationResource using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientAuthorizationResource) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientAuthorizationResourceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientAuthorizationResource) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientAuthorizationScope
func (mg *ClientAuthorizationScope) GetTerraformResourceType() string {
	return "keycloak_openid_client_authorization_scope"
}

// GetConnectionDetailsMapping for this ClientAuthorizationScope
func (tr *ClientAuthorizationScope) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientAuthorizationScope
func (tr *ClientAuthorizationScope) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientAuthorizationScope
func (tr *ClientAuthorizationScope) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientAuthorizationScope
func (tr *ClientAuthorizationScope) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientAuthorizationScope
func (tr *ClientAuthorizationScope) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientAuthorizationScope
func (tr *ClientAuthorizationScope) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientAuthorizationScope using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientAuthorizationScope) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientAuthorizationScopeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientAuthorizationScope) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientClientPolicy
func (mg *ClientClientPolicy) GetTerraformResourceType() string {
	return "keycloak_openid_client_client_policy"
}

// GetConnectionDetailsMapping for this ClientClientPolicy
func (tr *ClientClientPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientClientPolicy
func (tr *ClientClientPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientClientPolicy
func (tr *ClientClientPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientClientPolicy
func (tr *ClientClientPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientClientPolicy
func (tr *ClientClientPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientClientPolicy
func (tr *ClientClientPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientClientPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientClientPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientClientPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientClientPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientDefaultScopes
func (mg *ClientDefaultScopes) GetTerraformResourceType() string {
	return "keycloak_openid_client_default_scopes"
}

// GetConnectionDetailsMapping for this ClientDefaultScopes
func (tr *ClientDefaultScopes) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientDefaultScopes
func (tr *ClientDefaultScopes) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientDefaultScopes
func (tr *ClientDefaultScopes) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientDefaultScopes
func (tr *ClientDefaultScopes) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientDefaultScopes
func (tr *ClientDefaultScopes) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientDefaultScopes
func (tr *ClientDefaultScopes) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientDefaultScopes using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientDefaultScopes) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientDefaultScopesParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientDefaultScopes) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientGroupPolicy
func (mg *ClientGroupPolicy) GetTerraformResourceType() string {
	return "keycloak_openid_client_group_policy"
}

// GetConnectionDetailsMapping for this ClientGroupPolicy
func (tr *ClientGroupPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientGroupPolicy
func (tr *ClientGroupPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientGroupPolicy
func (tr *ClientGroupPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientGroupPolicy
func (tr *ClientGroupPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientGroupPolicy
func (tr *ClientGroupPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientGroupPolicy
func (tr *ClientGroupPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientGroupPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientGroupPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientGroupPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientGroupPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientJsPolicy
func (mg *ClientJsPolicy) GetTerraformResourceType() string {
	return "keycloak_openid_client_js_policy"
}

// GetConnectionDetailsMapping for this ClientJsPolicy
func (tr *ClientJsPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientJsPolicy
func (tr *ClientJsPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientJsPolicy
func (tr *ClientJsPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientJsPolicy
func (tr *ClientJsPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientJsPolicy
func (tr *ClientJsPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientJsPolicy
func (tr *ClientJsPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientJsPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientJsPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientJsPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientJsPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientOptionalScopes
func (mg *ClientOptionalScopes) GetTerraformResourceType() string {
	return "keycloak_openid_client_optional_scopes"
}

// GetConnectionDetailsMapping for this ClientOptionalScopes
func (tr *ClientOptionalScopes) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientOptionalScopes
func (tr *ClientOptionalScopes) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientOptionalScopes
func (tr *ClientOptionalScopes) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientOptionalScopes
func (tr *ClientOptionalScopes) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientOptionalScopes
func (tr *ClientOptionalScopes) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientOptionalScopes
func (tr *ClientOptionalScopes) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientOptionalScopes using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientOptionalScopes) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientOptionalScopesParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientOptionalScopes) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientPermissions
func (mg *ClientPermissions) GetTerraformResourceType() string {
	return "keycloak_openid_client_permissions"
}

// GetConnectionDetailsMapping for this ClientPermissions
func (tr *ClientPermissions) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientPermissions
func (tr *ClientPermissions) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientPermissions
func (tr *ClientPermissions) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientPermissions
func (tr *ClientPermissions) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientPermissions
func (tr *ClientPermissions) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientPermissions
func (tr *ClientPermissions) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientPermissions using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientPermissions) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientPermissionsParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientPermissions) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientRolePolicy
func (mg *ClientRolePolicy) GetTerraformResourceType() string {
	return "keycloak_openid_client_role_policy"
}

// GetConnectionDetailsMapping for this ClientRolePolicy
func (tr *ClientRolePolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientRolePolicy
func (tr *ClientRolePolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientRolePolicy
func (tr *ClientRolePolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientRolePolicy
func (tr *ClientRolePolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientRolePolicy
func (tr *ClientRolePolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientRolePolicy
func (tr *ClientRolePolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientRolePolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientRolePolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientRolePolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientRolePolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientScope
func (mg *ClientScope) GetTerraformResourceType() string {
	return "keycloak_openid_client_scope"
}

// GetConnectionDetailsMapping for this ClientScope
func (tr *ClientScope) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientScope
func (tr *ClientScope) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientScope
func (tr *ClientScope) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientScope
func (tr *ClientScope) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientScope
func (tr *ClientScope) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientScope
func (tr *ClientScope) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientScope using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientScope) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientScopeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientScope) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientServiceAccountRealmRole
func (mg *ClientServiceAccountRealmRole) GetTerraformResourceType() string {
	return "keycloak_openid_client_service_account_realm_role"
}

// GetConnectionDetailsMapping for this ClientServiceAccountRealmRole
func (tr *ClientServiceAccountRealmRole) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientServiceAccountRealmRole
func (tr *ClientServiceAccountRealmRole) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientServiceAccountRealmRole
func (tr *ClientServiceAccountRealmRole) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientServiceAccountRealmRole
func (tr *ClientServiceAccountRealmRole) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientServiceAccountRealmRole
func (tr *ClientServiceAccountRealmRole) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientServiceAccountRealmRole
func (tr *ClientServiceAccountRealmRole) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientServiceAccountRealmRole using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientServiceAccountRealmRole) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientServiceAccountRealmRoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientServiceAccountRealmRole) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientServiceAccountRole
func (mg *ClientServiceAccountRole) GetTerraformResourceType() string {
	return "keycloak_openid_client_service_account_role"
}

// GetConnectionDetailsMapping for this ClientServiceAccountRole
func (tr *ClientServiceAccountRole) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientServiceAccountRole
func (tr *ClientServiceAccountRole) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientServiceAccountRole
func (tr *ClientServiceAccountRole) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientServiceAccountRole
func (tr *ClientServiceAccountRole) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientServiceAccountRole
func (tr *ClientServiceAccountRole) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientServiceAccountRole
func (tr *ClientServiceAccountRole) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientServiceAccountRole using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientServiceAccountRole) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientServiceAccountRoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientServiceAccountRole) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientTimePolicy
func (mg *ClientTimePolicy) GetTerraformResourceType() string {
	return "keycloak_openid_client_time_policy"
}

// GetConnectionDetailsMapping for this ClientTimePolicy
func (tr *ClientTimePolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientTimePolicy
func (tr *ClientTimePolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientTimePolicy
func (tr *ClientTimePolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientTimePolicy
func (tr *ClientTimePolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientTimePolicy
func (tr *ClientTimePolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientTimePolicy
func (tr *ClientTimePolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientTimePolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientTimePolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientTimePolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientTimePolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClientUserPolicy
func (mg *ClientUserPolicy) GetTerraformResourceType() string {
	return "keycloak_openid_client_user_policy"
}

// GetConnectionDetailsMapping for this ClientUserPolicy
func (tr *ClientUserPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClientUserPolicy
func (tr *ClientUserPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClientUserPolicy
func (tr *ClientUserPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClientUserPolicy
func (tr *ClientUserPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClientUserPolicy
func (tr *ClientUserPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClientUserPolicy
func (tr *ClientUserPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClientUserPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClientUserPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientUserPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClientUserPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FullNameProtocolMapper
func (mg *FullNameProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_full_name_protocol_mapper"
}

// GetConnectionDetailsMapping for this FullNameProtocolMapper
func (tr *FullNameProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FullNameProtocolMapper
func (tr *FullNameProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FullNameProtocolMapper
func (tr *FullNameProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FullNameProtocolMapper
func (tr *FullNameProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FullNameProtocolMapper
func (tr *FullNameProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FullNameProtocolMapper
func (tr *FullNameProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FullNameProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FullNameProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &FullNameProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FullNameProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this GroupMembershipProtocolMapper
func (mg *GroupMembershipProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_group_membership_protocol_mapper"
}

// GetConnectionDetailsMapping for this GroupMembershipProtocolMapper
func (tr *GroupMembershipProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this GroupMembershipProtocolMapper
func (tr *GroupMembershipProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this GroupMembershipProtocolMapper
func (tr *GroupMembershipProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this GroupMembershipProtocolMapper
func (tr *GroupMembershipProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this GroupMembershipProtocolMapper
func (tr *GroupMembershipProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this GroupMembershipProtocolMapper
func (tr *GroupMembershipProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this GroupMembershipProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *GroupMembershipProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &GroupMembershipProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *GroupMembershipProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this HardcodedClaimProtocolMapper
func (mg *HardcodedClaimProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_hardcoded_claim_protocol_mapper"
}

// GetConnectionDetailsMapping for this HardcodedClaimProtocolMapper
func (tr *HardcodedClaimProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this HardcodedClaimProtocolMapper
func (tr *HardcodedClaimProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HardcodedClaimProtocolMapper
func (tr *HardcodedClaimProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HardcodedClaimProtocolMapper
func (tr *HardcodedClaimProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HardcodedClaimProtocolMapper
func (tr *HardcodedClaimProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HardcodedClaimProtocolMapper
func (tr *HardcodedClaimProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HardcodedClaimProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HardcodedClaimProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &HardcodedClaimProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HardcodedClaimProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this HardcodedRoleProtocolMapper
func (mg *HardcodedRoleProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_hardcoded_role_protocol_mapper"
}

// GetConnectionDetailsMapping for this HardcodedRoleProtocolMapper
func (tr *HardcodedRoleProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this HardcodedRoleProtocolMapper
func (tr *HardcodedRoleProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HardcodedRoleProtocolMapper
func (tr *HardcodedRoleProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HardcodedRoleProtocolMapper
func (tr *HardcodedRoleProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HardcodedRoleProtocolMapper
func (tr *HardcodedRoleProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HardcodedRoleProtocolMapper
func (tr *HardcodedRoleProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HardcodedRoleProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HardcodedRoleProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &HardcodedRoleProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HardcodedRoleProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ScriptProtocolMapper
func (mg *ScriptProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_script_protocol_mapper"
}

// GetConnectionDetailsMapping for this ScriptProtocolMapper
func (tr *ScriptProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ScriptProtocolMapper
func (tr *ScriptProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ScriptProtocolMapper
func (tr *ScriptProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ScriptProtocolMapper
func (tr *ScriptProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ScriptProtocolMapper
func (tr *ScriptProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ScriptProtocolMapper
func (tr *ScriptProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ScriptProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ScriptProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &ScriptProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ScriptProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UserAttributeProtocolMapper
func (mg *UserAttributeProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_user_attribute_protocol_mapper"
}

// GetConnectionDetailsMapping for this UserAttributeProtocolMapper
func (tr *UserAttributeProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UserAttributeProtocolMapper
func (tr *UserAttributeProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UserAttributeProtocolMapper
func (tr *UserAttributeProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UserAttributeProtocolMapper
func (tr *UserAttributeProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UserAttributeProtocolMapper
func (tr *UserAttributeProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UserAttributeProtocolMapper
func (tr *UserAttributeProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UserAttributeProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UserAttributeProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &UserAttributeProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UserAttributeProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UserClientRoleProtocolMapper
func (mg *UserClientRoleProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_user_client_role_protocol_mapper"
}

// GetConnectionDetailsMapping for this UserClientRoleProtocolMapper
func (tr *UserClientRoleProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UserClientRoleProtocolMapper
func (tr *UserClientRoleProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UserClientRoleProtocolMapper
func (tr *UserClientRoleProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UserClientRoleProtocolMapper
func (tr *UserClientRoleProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UserClientRoleProtocolMapper
func (tr *UserClientRoleProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UserClientRoleProtocolMapper
func (tr *UserClientRoleProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UserClientRoleProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UserClientRoleProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &UserClientRoleProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UserClientRoleProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UserPropertyProtocolMapper
func (mg *UserPropertyProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_user_property_protocol_mapper"
}

// GetConnectionDetailsMapping for this UserPropertyProtocolMapper
func (tr *UserPropertyProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UserPropertyProtocolMapper
func (tr *UserPropertyProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UserPropertyProtocolMapper
func (tr *UserPropertyProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UserPropertyProtocolMapper
func (tr *UserPropertyProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UserPropertyProtocolMapper
func (tr *UserPropertyProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UserPropertyProtocolMapper
func (tr *UserPropertyProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UserPropertyProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UserPropertyProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &UserPropertyProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UserPropertyProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UserRealmRoleProtocolMapper
func (mg *UserRealmRoleProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_user_realm_role_protocol_mapper"
}

// GetConnectionDetailsMapping for this UserRealmRoleProtocolMapper
func (tr *UserRealmRoleProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UserRealmRoleProtocolMapper
func (tr *UserRealmRoleProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UserRealmRoleProtocolMapper
func (tr *UserRealmRoleProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UserRealmRoleProtocolMapper
func (tr *UserRealmRoleProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UserRealmRoleProtocolMapper
func (tr *UserRealmRoleProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UserRealmRoleProtocolMapper
func (tr *UserRealmRoleProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UserRealmRoleProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UserRealmRoleProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &UserRealmRoleProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UserRealmRoleProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UserSessionNoteProtocolMapper
func (mg *UserSessionNoteProtocolMapper) GetTerraformResourceType() string {
	return "keycloak_openid_user_session_note_protocol_mapper"
}

// GetConnectionDetailsMapping for this UserSessionNoteProtocolMapper
func (tr *UserSessionNoteProtocolMapper) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UserSessionNoteProtocolMapper
func (tr *UserSessionNoteProtocolMapper) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UserSessionNoteProtocolMapper
func (tr *UserSessionNoteProtocolMapper) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UserSessionNoteProtocolMapper
func (tr *UserSessionNoteProtocolMapper) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UserSessionNoteProtocolMapper
func (tr *UserSessionNoteProtocolMapper) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UserSessionNoteProtocolMapper
func (tr *UserSessionNoteProtocolMapper) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UserSessionNoteProtocolMapper using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UserSessionNoteProtocolMapper) LateInitialize(attrs []byte) (bool, error) {
	params := &UserSessionNoteProtocolMapperParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UserSessionNoteProtocolMapper) GetTerraformSchemaVersion() int {
	return 0
}
