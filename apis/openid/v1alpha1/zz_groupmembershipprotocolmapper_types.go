/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupMembershipProtocolMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupMembershipProtocolMapperParameters struct {

	// +kubebuilder:validation:Optional
	AddToAccessToken *bool `json:"addToAccessToken,omitempty" tf:"add_to_access_token,omitempty"`

	// +kubebuilder:validation:Optional
	AddToIDToken *bool `json:"addToIdToken,omitempty" tf:"add_to_id_token,omitempty"`

	// +kubebuilder:validation:Optional
	AddToUserinfo *bool `json:"addToUserinfo,omitempty" tf:"add_to_userinfo,omitempty"`

	// +kubebuilder:validation:Required
	ClaimName *string `json:"claimName" tf:"claim_name,omitempty"`

	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	// +kubebuilder:validation:Optional
	ClientScopeID *string `json:"clientScopeId,omitempty" tf:"client_scope_id,omitempty"`

	// +kubebuilder:validation:Optional
	FullPath *bool `json:"fullPath,omitempty" tf:"full_path,omitempty"`

	// The realm id where the associated client or client scope exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// GroupMembershipProtocolMapperSpec defines the desired state of GroupMembershipProtocolMapper
type GroupMembershipProtocolMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupMembershipProtocolMapperParameters `json:"forProvider"`
}

// GroupMembershipProtocolMapperStatus defines the observed state of GroupMembershipProtocolMapper.
type GroupMembershipProtocolMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupMembershipProtocolMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMembershipProtocolMapper is the Schema for the GroupMembershipProtocolMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type GroupMembershipProtocolMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupMembershipProtocolMapperSpec   `json:"spec"`
	Status            GroupMembershipProtocolMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMembershipProtocolMapperList contains a list of GroupMembershipProtocolMappers
type GroupMembershipProtocolMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupMembershipProtocolMapper `json:"items"`
}

// Repository type metadata.
var (
	GroupMembershipProtocolMapper_Kind             = "GroupMembershipProtocolMapper"
	GroupMembershipProtocolMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupMembershipProtocolMapper_Kind}.String()
	GroupMembershipProtocolMapper_KindAPIVersion   = GroupMembershipProtocolMapper_Kind + "." + CRDGroupVersion.String()
	GroupMembershipProtocolMapper_GroupVersionKind = CRDGroupVersion.WithKind(GroupMembershipProtocolMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupMembershipProtocolMapper{}, &GroupMembershipProtocolMapperList{})
}
