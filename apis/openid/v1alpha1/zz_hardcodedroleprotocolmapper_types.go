/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HardcodedRoleProtocolMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HardcodedRoleProtocolMapperParameters struct {

	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	// +kubebuilder:validation:Optional
	ClientScopeID *string `json:"clientScopeId,omitempty" tf:"client_scope_id,omitempty"`

	// The realm id where the associated client or client scope exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Required
	RoleID *string `json:"roleId" tf:"role_id,omitempty"`
}

// HardcodedRoleProtocolMapperSpec defines the desired state of HardcodedRoleProtocolMapper
type HardcodedRoleProtocolMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HardcodedRoleProtocolMapperParameters `json:"forProvider"`
}

// HardcodedRoleProtocolMapperStatus defines the observed state of HardcodedRoleProtocolMapper.
type HardcodedRoleProtocolMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HardcodedRoleProtocolMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HardcodedRoleProtocolMapper is the Schema for the HardcodedRoleProtocolMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type HardcodedRoleProtocolMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HardcodedRoleProtocolMapperSpec   `json:"spec"`
	Status            HardcodedRoleProtocolMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HardcodedRoleProtocolMapperList contains a list of HardcodedRoleProtocolMappers
type HardcodedRoleProtocolMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HardcodedRoleProtocolMapper `json:"items"`
}

// Repository type metadata.
var (
	HardcodedRoleProtocolMapper_Kind             = "HardcodedRoleProtocolMapper"
	HardcodedRoleProtocolMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HardcodedRoleProtocolMapper_Kind}.String()
	HardcodedRoleProtocolMapper_KindAPIVersion   = HardcodedRoleProtocolMapper_Kind + "." + CRDGroupVersion.String()
	HardcodedRoleProtocolMapper_GroupVersionKind = CRDGroupVersion.WithKind(HardcodedRoleProtocolMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&HardcodedRoleProtocolMapper{}, &HardcodedRoleProtocolMapperList{})
}
