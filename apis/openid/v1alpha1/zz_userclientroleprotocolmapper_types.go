/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserClientRoleProtocolMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UserClientRoleProtocolMapperParameters struct {

	// Indicates if the attribute should be a claim in the access token.
	// +kubebuilder:validation:Optional
	AddToAccessToken *bool `json:"addToAccessToken,omitempty" tf:"add_to_access_token,omitempty"`

	// Indicates if the attribute should be a claim in the id token.
	// +kubebuilder:validation:Optional
	AddToIDToken *bool `json:"addToIdToken,omitempty" tf:"add_to_id_token,omitempty"`

	// Indicates if the attribute should appear in the userinfo response body.
	// +kubebuilder:validation:Optional
	AddToUserinfo *bool `json:"addToUserinfo,omitempty" tf:"add_to_userinfo,omitempty"`

	// +kubebuilder:validation:Required
	ClaimName *string `json:"claimName" tf:"claim_name,omitempty"`

	// Claim type used when serializing tokens.
	// +kubebuilder:validation:Optional
	ClaimValueType *string `json:"claimValueType,omitempty" tf:"claim_value_type,omitempty"`

	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Client ID for role mappings.
	// +kubebuilder:validation:Optional
	ClientIDForRoleMappings *string `json:"clientIdForRoleMappings,omitempty" tf:"client_id_for_role_mappings,omitempty"`

	// Prefix that will be added to each client role.
	// +kubebuilder:validation:Optional
	ClientRolePrefix *string `json:"clientRolePrefix,omitempty" tf:"client_role_prefix,omitempty"`

	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	// +kubebuilder:validation:Optional
	ClientScopeID *string `json:"clientScopeId,omitempty" tf:"client_scope_id,omitempty"`

	// Indicates whether this attribute is a single value or an array of values.
	// +kubebuilder:validation:Optional
	Multivalued *bool `json:"multivalued,omitempty" tf:"multivalued,omitempty"`

	// The realm id where the associated client or client scope exists.
	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// UserClientRoleProtocolMapperSpec defines the desired state of UserClientRoleProtocolMapper
type UserClientRoleProtocolMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserClientRoleProtocolMapperParameters `json:"forProvider"`
}

// UserClientRoleProtocolMapperStatus defines the observed state of UserClientRoleProtocolMapper.
type UserClientRoleProtocolMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserClientRoleProtocolMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserClientRoleProtocolMapper is the Schema for the UserClientRoleProtocolMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type UserClientRoleProtocolMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserClientRoleProtocolMapperSpec   `json:"spec"`
	Status            UserClientRoleProtocolMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserClientRoleProtocolMapperList contains a list of UserClientRoleProtocolMappers
type UserClientRoleProtocolMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserClientRoleProtocolMapper `json:"items"`
}

// Repository type metadata.
var (
	UserClientRoleProtocolMapper_Kind             = "UserClientRoleProtocolMapper"
	UserClientRoleProtocolMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserClientRoleProtocolMapper_Kind}.String()
	UserClientRoleProtocolMapper_KindAPIVersion   = UserClientRoleProtocolMapper_Kind + "." + CRDGroupVersion.String()
	UserClientRoleProtocolMapper_GroupVersionKind = CRDGroupVersion.WithKind(UserClientRoleProtocolMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&UserClientRoleProtocolMapper{}, &UserClientRoleProtocolMapperList{})
}
