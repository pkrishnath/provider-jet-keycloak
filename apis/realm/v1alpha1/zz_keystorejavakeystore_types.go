/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeystoreJavaKeystoreObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KeystoreJavaKeystoreParameters struct {

	// Set if the keys can be used for signing
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Intended algorithm for the key
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Set if the keys are enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Alias for the private key
	// +kubebuilder:validation:Required
	KeyAlias *string `json:"keyAlias" tf:"key_alias,omitempty"`

	// Password for the private key
	// +kubebuilder:validation:Required
	KeyPassword *string `json:"keyPassword" tf:"key_password,omitempty"`

	// Path to keys file
	// +kubebuilder:validation:Required
	Keystore *string `json:"keystore" tf:"keystore,omitempty"`

	// Password for the keys
	// +kubebuilder:validation:Required
	KeystorePassword *string `json:"keystorePassword" tf:"keystore_password,omitempty"`

	// Priority for the provider
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// KeystoreJavaKeystoreSpec defines the desired state of KeystoreJavaKeystore
type KeystoreJavaKeystoreSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeystoreJavaKeystoreParameters `json:"forProvider"`
}

// KeystoreJavaKeystoreStatus defines the observed state of KeystoreJavaKeystore.
type KeystoreJavaKeystoreStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeystoreJavaKeystoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeystoreJavaKeystore is the Schema for the KeystoreJavaKeystores API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type KeystoreJavaKeystore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeystoreJavaKeystoreSpec   `json:"spec"`
	Status            KeystoreJavaKeystoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeystoreJavaKeystoreList contains a list of KeystoreJavaKeystores
type KeystoreJavaKeystoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeystoreJavaKeystore `json:"items"`
}

// Repository type metadata.
var (
	KeystoreJavaKeystore_Kind             = "KeystoreJavaKeystore"
	KeystoreJavaKeystore_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeystoreJavaKeystore_Kind}.String()
	KeystoreJavaKeystore_KindAPIVersion   = KeystoreJavaKeystore_Kind + "." + CRDGroupVersion.String()
	KeystoreJavaKeystore_GroupVersionKind = CRDGroupVersion.WithKind(KeystoreJavaKeystore_Kind)
)

func init() {
	SchemeBuilder.Register(&KeystoreJavaKeystore{}, &KeystoreJavaKeystoreList{})
}
