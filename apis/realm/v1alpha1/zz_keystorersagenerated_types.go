/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeystoreRsaGeneratedObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KeystoreRsaGeneratedParameters struct {

	// Set if the keys can be used for signing
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Intended algorithm for the key
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Set if the keys are enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Size for the generated keys
	// +kubebuilder:validation:Optional
	KeySize *float64 `json:"keySize,omitempty" tf:"key_size,omitempty"`

	// Priority for the provider
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`
}

// KeystoreRsaGeneratedSpec defines the desired state of KeystoreRsaGenerated
type KeystoreRsaGeneratedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeystoreRsaGeneratedParameters `json:"forProvider"`
}

// KeystoreRsaGeneratedStatus defines the observed state of KeystoreRsaGenerated.
type KeystoreRsaGeneratedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeystoreRsaGeneratedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeystoreRsaGenerated is the Schema for the KeystoreRsaGenerateds API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type KeystoreRsaGenerated struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeystoreRsaGeneratedSpec   `json:"spec"`
	Status            KeystoreRsaGeneratedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeystoreRsaGeneratedList contains a list of KeystoreRsaGenerateds
type KeystoreRsaGeneratedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeystoreRsaGenerated `json:"items"`
}

// Repository type metadata.
var (
	KeystoreRsaGenerated_Kind             = "KeystoreRsaGenerated"
	KeystoreRsaGenerated_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeystoreRsaGenerated_Kind}.String()
	KeystoreRsaGenerated_KindAPIVersion   = KeystoreRsaGenerated_Kind + "." + CRDGroupVersion.String()
	KeystoreRsaGenerated_GroupVersionKind = CRDGroupVersion.WithKind(KeystoreRsaGenerated_Kind)
)

func init() {
	SchemeBuilder.Register(&KeystoreRsaGenerated{}, &KeystoreRsaGeneratedList{})
}
