/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthenticationFlowBindingOverridesObservation struct {
}

type AuthenticationFlowBindingOverridesParameters struct {

	// +kubebuilder:validation:Optional
	BrowserID *string `json:"browserId,omitempty" tf:"browser_id,omitempty"`

	// +kubebuilder:validation:Optional
	DirectGrantID *string `json:"directGrantId,omitempty" tf:"direct_grant_id,omitempty"`
}

type ClientObservation struct {
	EncryptionCertificateSha1 *string `json:"encryptionCertificateSha1,omitempty" tf:"encryption_certificate_sha1,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SigningCertificateSha1 *string `json:"signingCertificateSha1,omitempty" tf:"signing_certificate_sha1,omitempty"`

	SigningPrivateKeySha1 *string `json:"signingPrivateKeySha1,omitempty" tf:"signing_private_key_sha1,omitempty"`
}

type ClientParameters struct {

	// +kubebuilder:validation:Optional
	AssertionConsumerPostURL *string `json:"assertionConsumerPostUrl,omitempty" tf:"assertion_consumer_post_url,omitempty"`

	// +kubebuilder:validation:Optional
	AssertionConsumerRedirectURL *string `json:"assertionConsumerRedirectUrl,omitempty" tf:"assertion_consumer_redirect_url,omitempty"`

	// +kubebuilder:validation:Optional
	AuthenticationFlowBindingOverrides []AuthenticationFlowBindingOverridesParameters `json:"authenticationFlowBindingOverrides,omitempty" tf:"authentication_flow_binding_overrides,omitempty"`

	// +kubebuilder:validation:Optional
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	// +kubebuilder:validation:Optional
	CanonicalizationMethod *string `json:"canonicalizationMethod,omitempty" tf:"canonicalization_method,omitempty"`

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientSignatureRequired *bool `json:"clientSignatureRequired,omitempty" tf:"client_signature_required,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptAssertions *bool `json:"encryptAssertions,omitempty" tf:"encrypt_assertions,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionCertificate *string `json:"encryptionCertificate,omitempty" tf:"encryption_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// +kubebuilder:validation:Optional
	ForceNameIDFormat *bool `json:"forceNameIdFormat,omitempty" tf:"force_name_id_format,omitempty"`

	// +kubebuilder:validation:Optional
	ForcePostBinding *bool `json:"forcePostBinding,omitempty" tf:"force_post_binding,omitempty"`

	// +kubebuilder:validation:Optional
	FrontChannelLogout *bool `json:"frontChannelLogout,omitempty" tf:"front_channel_logout,omitempty"`

	// +kubebuilder:validation:Optional
	FullScopeAllowed *bool `json:"fullScopeAllowed,omitempty" tf:"full_scope_allowed,omitempty"`

	// +kubebuilder:validation:Optional
	IdpInitiatedSsoRelayState *string `json:"idpInitiatedSsoRelayState,omitempty" tf:"idp_initiated_sso_relay_state,omitempty"`

	// +kubebuilder:validation:Optional
	IdpInitiatedSsoURLName *string `json:"idpInitiatedSsoUrlName,omitempty" tf:"idp_initiated_sso_url_name,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeAuthnStatement *bool `json:"includeAuthnStatement,omitempty" tf:"include_authn_statement,omitempty"`

	// +kubebuilder:validation:Optional
	LoginTheme *string `json:"loginTheme,omitempty" tf:"login_theme,omitempty"`

	// +kubebuilder:validation:Optional
	LogoutServicePostBindingURL *string `json:"logoutServicePostBindingUrl,omitempty" tf:"logout_service_post_binding_url,omitempty"`

	// +kubebuilder:validation:Optional
	LogoutServiceRedirectBindingURL *string `json:"logoutServiceRedirectBindingUrl,omitempty" tf:"logout_service_redirect_binding_url,omitempty"`

	// +kubebuilder:validation:Optional
	MasterSAMLProcessingURL *string `json:"masterSamlProcessingUrl,omitempty" tf:"master_saml_processing_url,omitempty"`

	// +kubebuilder:validation:Optional
	NameIDFormat *string `json:"nameIdFormat,omitempty" tf:"name_id_format,omitempty"`

	// +kubebuilder:validation:Required
	RealmID *string `json:"realmId" tf:"realm_id,omitempty"`

	// +kubebuilder:validation:Optional
	RootURL *string `json:"rootUrl,omitempty" tf:"root_url,omitempty"`

	// +kubebuilder:validation:Optional
	SignAssertions *bool `json:"signAssertions,omitempty" tf:"sign_assertions,omitempty"`

	// +kubebuilder:validation:Optional
	SignDocuments *bool `json:"signDocuments,omitempty" tf:"sign_documents,omitempty"`

	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	SignatureKeyName *string `json:"signatureKeyName,omitempty" tf:"signature_key_name,omitempty"`

	// +kubebuilder:validation:Optional
	SigningCertificate *string `json:"signingCertificate,omitempty" tf:"signing_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	SigningPrivateKey *string `json:"signingPrivateKey,omitempty" tf:"signing_private_key,omitempty"`

	// +kubebuilder:validation:Optional
	ValidRedirectUris []*string `json:"validRedirectUris,omitempty" tf:"valid_redirect_uris,omitempty"`
}

// ClientSpec defines the desired state of Client
type ClientSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientParameters `json:"forProvider"`
}

// ClientStatus defines the observed state of Client.
type ClientStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Client is the Schema for the Clients API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type Client struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientSpec   `json:"spec"`
	Status            ClientStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientList contains a list of Clients
type ClientList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Client `json:"items"`
}

// Repository type metadata.
var (
	Client_Kind             = "Client"
	Client_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Client_Kind}.String()
	Client_KindAPIVersion   = Client_Kind + "." + CRDGroupVersion.String()
	Client_GroupVersionKind = CRDGroupVersion.WithKind(Client_Kind)
)

func init() {
	SchemeBuilder.Register(&Client{}, &ClientList{})
}
