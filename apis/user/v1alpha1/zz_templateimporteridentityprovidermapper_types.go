/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TemplateImporterIdentityProviderMapperObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TemplateImporterIdentityProviderMapperParameters struct {

	// +kubebuilder:validation:Optional
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// IDP Alias
	// +kubebuilder:validation:Required
	IdentityProviderAlias *string `json:"identityProviderAlias" tf:"identity_provider_alias,omitempty"`

	// Realm Name
	// +kubebuilder:validation:Required
	Realm *string `json:"realm" tf:"realm,omitempty"`

	// Username For Template Import
	// +kubebuilder:validation:Optional
	Template *string `json:"template,omitempty" tf:"template,omitempty"`
}

// TemplateImporterIdentityProviderMapperSpec defines the desired state of TemplateImporterIdentityProviderMapper
type TemplateImporterIdentityProviderMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TemplateImporterIdentityProviderMapperParameters `json:"forProvider"`
}

// TemplateImporterIdentityProviderMapperStatus defines the observed state of TemplateImporterIdentityProviderMapper.
type TemplateImporterIdentityProviderMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TemplateImporterIdentityProviderMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateImporterIdentityProviderMapper is the Schema for the TemplateImporterIdentityProviderMappers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloakjet}
type TemplateImporterIdentityProviderMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TemplateImporterIdentityProviderMapperSpec   `json:"spec"`
	Status            TemplateImporterIdentityProviderMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateImporterIdentityProviderMapperList contains a list of TemplateImporterIdentityProviderMappers
type TemplateImporterIdentityProviderMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TemplateImporterIdentityProviderMapper `json:"items"`
}

// Repository type metadata.
var (
	TemplateImporterIdentityProviderMapper_Kind             = "TemplateImporterIdentityProviderMapper"
	TemplateImporterIdentityProviderMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TemplateImporterIdentityProviderMapper_Kind}.String()
	TemplateImporterIdentityProviderMapper_KindAPIVersion   = TemplateImporterIdentityProviderMapper_Kind + "." + CRDGroupVersion.String()
	TemplateImporterIdentityProviderMapper_GroupVersionKind = CRDGroupVersion.WithKind(TemplateImporterIdentityProviderMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&TemplateImporterIdentityProviderMapper{}, &TemplateImporterIdentityProviderMapperList{})
}
